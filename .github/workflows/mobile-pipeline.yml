name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install dependencies
      run: npm ci

    - name: Setup Expo CLI (if needed)
      run: |
        if [ -f "app.json" ] || [ -f "app.config.js" ]; then
          echo "Expo project detected, installing Expo CLI"
          npm install -g @expo/cli
          # Ensure the global bin directory is in PATH
          echo "$(npm config get prefix)/bin" >> $GITHUB_PATH
        fi

    - name: Generate native code (Expo prebuild)
      run: |
        if [ -f "app.json" ] || [ -f "app.config.js" ]; then
          echo "Running Expo prebuild to generate native Android code"
          if [ ! -d "android" ]; then
            echo "Android directory not found, running prebuild..."
            
            # Detect Expo SDK version from multiple sources
            SDK_VERSION=""
            if [ -f "app.json" ]; then
              SDK_VERSION=$(cat app.json | jq -r '.expo.sdkVersion // empty')
            fi
            
            if [ -z "$SDK_VERSION" ] || [ "$SDK_VERSION" = "null" ]; then
              # Try to detect from react-native version in package.json
              RN_VERSION=$(cat package.json | jq -r '.dependencies["react-native"] // empty' 2>/dev/null || echo "")
              if [[ "$RN_VERSION" =~ sdk-([0-9]+) ]]; then
                SDK_VERSION="${BASH_REMATCH[1]}"
                echo "Detected SDK version from react-native dependency: SDK $SDK_VERSION"
              else
                # Check if expo package exists and get its version
                EXPO_VERSION=$(cat package.json | jq -r '.dependencies.expo // empty' 2>/dev/null || echo "")
                if [ ! -z "$EXPO_VERSION" ] && [ "$EXPO_VERSION" != "null" ]; then
                  # Extract major version from expo package (e.g., "~42.0.0" -> "42")
                  if [[ "$EXPO_VERSION" =~ ([0-9]+). ]]; then
                    SDK_VERSION="${BASH_REMATCH[1]}"
                    echo "Detected SDK version from expo package: SDK $SDK_VERSION"
                  fi
                fi
              fi
            else
              echo "Detected Expo SDK version from app.json: $SDK_VERSION"
            fi
            
            # Determine if we need compatibility mode for older SDKs
            if [ ! -z "$SDK_VERSION" ] && [ "$SDK_VERSION" != "null" ]; then
              SDK_MAJOR=$(echo $SDK_VERSION | cut -d. -f1)
              if [ "$SDK_MAJOR" -lt "47" ]; then
                echo "Old SDK detected (SDK $SDK_MAJOR), using compatibility mode..."
                COMPAT_MODE=true
              else
                echo "Recent SDK detected (SDK $SDK_MAJOR), standard dependencies should work"
                COMPAT_MODE=false
              fi
            else
              echo "Could not detect SDK version, defaulting to compatibility mode for safety"
              COMPAT_MODE=true
            fi
            
            # Install appropriate expo version based on SDK
            if [ "$COMPAT_MODE" = "true" ]; then
              echo "Installing expo package and gradle plugin for old SDK..."
              # Install the specific gradle plugin version needed for older SDKs
              npm install @react-native/gradle-plugin@0.0.71 --save-dev || npm install @react-native/gradle-plugin@latest --save-dev
              # Don't upgrade expo for old SDKs, use existing version
              npm install
            else
              echo "Installing/updating expo package (required for prebuild)..."
              npm install expo@latest
            fi
            
            # Also install expo-modules-autolinking explicitly if needed
            if ! npm list expo-modules-autolinking > /dev/null 2>&1; then
              echo "Installing expo-modules-autolinking..."
              npm install expo-modules-autolinking@latest
            fi
            
            # Use CI=1 instead of --non-interactive (as recommended by Expo CLI)
            echo "Running prebuild with CI=1..."
            CI=1 npx --yes @expo/cli@latest prebuild --platform android --no-install
            
            # Verify prebuild worked
            if [ ! -d "android" ]; then
              echo "Error: Prebuild failed to create android directory"
              echo "Attempting with basic prebuild command..."
              CI=1 npx --yes @expo/cli@latest prebuild --no-install
            fi
            
            # Final verification
            if [ ! -d "android" ]; then
              echo "Error: Prebuild failed to create android directory after all attempts"
              exit 1
            fi
            echo "Prebuild completed successfully"
            
            # Install/update dependencies after prebuild (required for Gradle)
            echo "Installing dependencies after prebuild..."
            npm install
            
            # SDK-specific compatibility fixes
            if [ "$COMPAT_MODE" = "true" ]; then
              echo "Applying compatibility fixes for SDK $SDK_VERSION..."
              
              # Install missing React Native gradle plugin (required for older Expo SDKs)
              echo "Installing React Native gradle plugin..."
              npm install @react-native/gradle-plugin@latest --save-dev
              
              # Also ensure react-native-gradle-plugin is available
              npm install react-native-gradle-plugin@latest --save-dev || true
              
              # For SDK < 45, we might need additional packages
              if [ "$SDK_MAJOR" -lt "45" ]; then
                echo "Installing additional compatibility packages for SDK < 45..."
                npm install @react-native-community/cli-platform-android@latest --save-dev || true
              fi
            else
              echo "Recent SDK detected, applying modern SDK compatibility fixes..."
              
              # For SDK 52+, we need to pin Kotlin version to avoid "Key 1.9.24 is missing" error
              if [ "$SDK_MAJOR" -ge "52" ]; then
                echo "Applying Kotlin version fix for SDK $SDK_MAJOR..."
                
                # Create gradle.properties with Kotlin version pinning if it doesn't exist
                if [ ! -f "gradle.properties" ]; then
                  echo "# Gradle properties for Expo SDK 52+" > gradle.properties
                  echo "org.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m" >> gradle.properties
                  echo "android.useAndroidX=true" >> gradle.properties
                  echo "android.enableJetifier=true" >> gradle.properties
                  echo "" >> gradle.properties
                  echo "# Pin Kotlin version to avoid compatibility issues" >> gradle.properties
                  echo "kotlin_version=1.9.10" >> gradle.properties
                  echo "android.defaults.buildfeatures.buildconfig=true" >> gradle.properties
                  echo "android.nonTransitiveRClass=false" >> gradle.properties
                else
                  # Add Kotlin version to existing gradle.properties if not present
                  if ! grep -q "kotlin_version" gradle.properties; then
                    echo "kotlin_version=1.9.10" >> gradle.properties
                  fi
                  if ! grep -q "android.defaults.buildfeatures.buildconfig" gradle.properties; then
                    echo "android.defaults.buildfeatures.buildconfig=true" >> gradle.properties
                  fi
                  if ! grep -q "android.nonTransitiveRClass" gradle.properties; then
                    echo "android.nonTransitiveRClass=false" >> gradle.properties
                  fi
                fi
                
                # Also update android/gradle.properties
                if [ -f "android/gradle.properties" ]; then
                  if ! grep -q "kotlin_version" android/gradle.properties; then
                    echo "kotlin_version=1.9.10" >> android/gradle.properties
                  fi
                  if ! grep -q "android.defaults.buildfeatures.buildconfig" android/gradle.properties; then
                    echo "android.defaults.buildfeatures.buildconfig=true" >> android/gradle.properties
                  fi
                fi
              fi
              
              echo "Recent SDK compatibility fixes applied"
            fi
            
            # Smart multi-version Gradle support to handle compatibility issues
            if [ -f "android/gradle/wrapper/gradle-wrapper.properties" ]; then
              echo "Setting up smart Gradle version selection..."
              
              # Determine compatible Gradle versions based on SDK and RN versions
              get_gradle_versions() {
                local sdk_ver="$1"
                local rn_ver="$2"
                
                if [ "$sdk_ver" -ge "51" ]; then
                  echo "8.0 7.6 7.4"  # SDK 51+ works best with these versions
                elif [ "$sdk_ver" -ge "49" ]; then
                  echo "7.6 7.4 8.0"  # SDK 49-50 prefers older Gradle
                elif [ "$sdk_ver" -ge "47" ]; then
                  echo "7.4 7.0 7.6"  # Older SDKs need older Gradle
                else
                  echo "7.0 6.9 7.4"  # Very old SDKs
                fi
              }
              
              # Get React Native version for better compatibility detection
              RN_VERSION_MAJOR=$(cat package.json | jq -r '.dependencies["react-native"] // "0.70.0"' | sed 's/[^0-9.]//g' | cut -d. -f2)
              
              GRADLE_VERSIONS=$(get_gradle_versions "${SDK_MAJOR:-50}" "${RN_VERSION_MAJOR:-70}")
              echo "Will try Gradle versions in order: $GRADLE_VERSIONS"
              
              # Store original gradle wrapper properties as backup
              cp android/gradle/wrapper/gradle-wrapper.properties android/gradle/wrapper/gradle-wrapper.properties.backup
            fi
          else
            echo "Android folder already exists, skipping prebuild"
          fi
        else
          echo "Regular React Native project, native code should already exist"
          if [ ! -d "android" ]; then
            echo "Error: Neither Expo project nor React Native project with android folder found"
            exit 1
          fi
        fi

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make Gradlew executable
      run: cd android && chmod +x ./gradlew

    - name: Build Android APK
      run: |
        cd android
        
        # Debug: Check Node.js and environment
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Checking package.json..."
        ls -la ../package.json
        
        # Debug: Check what's in settings.gradle that's causing the issue
        echo "Checking settings.gradle line 3..."
        head -5 settings.gradle
        
        # Debug: Check if React Native CLI is available
        echo "Checking React Native CLI..."
        npx react-native --version || echo "React Native CLI not available"
        
        # Debug: Check if gradle plugin is available
        echo "Checking for @react-native/gradle-plugin..."
        npm list @react-native/gradle-plugin || echo "Gradle plugin not found"
        
        # Create basic metro.config.js if it doesn't exist
        if [ ! -f "../metro.config.js" ]; then
          echo "Creating metro.config.js..."
          echo "const { getDefaultConfig } = require('expo/metro-config');" > ../metro.config.js
          echo "const config = getDefaultConfig(__dirname);" >> ../metro.config.js
          echo "module.exports = config;" >> ../metro.config.js
        fi
        
        # Multi-version Gradle build with smart fallback
        build_success=false
        GRADLE_VERSIONS="${GRADLE_VERSIONS:-8.0 7.6 7.4}"
        
        for gradle_version in $GRADLE_VERSIONS; do
          echo ""
          echo "=== Attempting build with Gradle $gradle_version ==="
          
          # Update gradle wrapper to use this version
          sed -i "s|gradle-.*-bin.zip|gradle-$gradle_version-bin.zip|" gradle/wrapper/gradle-wrapper.properties
          echo "Updated to Gradle $gradle_version"
          
          # Clean any existing build artifacts
          echo "Cleaning previous build artifacts..."
          ./gradlew clean --no-daemon --quiet || true
          
          # Attempt build with timeout (3 minutes per version)
          echo "Building Android APK with Gradle $gradle_version..."
          if timeout 180 ./gradlew assembleRelease --no-daemon --stacktrace; then
            echo "SUCCESS: Build completed with Gradle $gradle_version"
            build_success=true
            break
          else
            echo "FAILED: Build failed with Gradle $gradle_version"
            echo "Error details saved, trying next version..."
          fi
        done
        
        # Check if any version succeeded
        if [ "$build_success" = "false" ]; then
          echo ""
          echo "=== All Gradle versions failed ==="
          echo "Tried versions: $GRADLE_VERSIONS"
          echo ""
          echo "For troubleshooting, consider:"
          echo "1. Using Expo EAS cloud build instead"
          echo "2. Checking project compatibility with React Native CLI"
          echo "3. Updating dependencies to latest versions"
          exit 1
        fi



    - name: Upload Android APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: android/app/build/outputs/apk/release/*.apk
        retention-days: 30

  build-ios:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'

    - name: Install dependencies
      run: npm ci

    - name: Setup Expo CLI (if needed)
      run: |
        if [ -f "app.json" ] || [ -f "app.config.js" ]; then
          echo "Expo project detected, installing Expo CLI"
          npm install -g @expo/cli
          # Ensure the global bin directory is in PATH
          echo "$(npm config get prefix)/bin" >> $GITHUB_PATH
        fi

    - name: Generate native code (Expo prebuild)
      run: |
        if [ -f "app.json" ] || [ -f "app.config.js" ]; then
          echo "Running Expo prebuild to generate native iOS code"
          if [ ! -d "ios" ]; then
            echo "iOS directory not found, running prebuild..."
            
            # Detect Expo SDK version from multiple sources
            SDK_VERSION=""
            if [ -f "app.json" ]; then
              SDK_VERSION=$(cat app.json | jq -r '.expo.sdkVersion // empty')
            fi
            
            if [ -z "$SDK_VERSION" ] || [ "$SDK_VERSION" = "null" ]; then
              # Try to detect from react-native version in package.json
              RN_VERSION=$(cat package.json | jq -r '.dependencies["react-native"] // empty' 2>/dev/null || echo "")
              if [[ "$RN_VERSION" =~ sdk-([0-9]+) ]]; then
                SDK_VERSION="${BASH_REMATCH[1]}"
                echo "Detected SDK version from react-native dependency: SDK $SDK_VERSION"
              else
                # Check if expo package exists and get its version
                EXPO_VERSION=$(cat package.json | jq -r '.dependencies.expo // empty' 2>/dev/null || echo "")
                if [ ! -z "$EXPO_VERSION" ] && [ "$EXPO_VERSION" != "null" ]; then
                  # Extract major version from expo package (e.g., "~42.0.0" -> "42")
                  if [[ "$EXPO_VERSION" =~ ([0-9]+). ]]; then
                    SDK_VERSION="${BASH_REMATCH[1]}"
                    echo "Detected SDK version from expo package: SDK $SDK_VERSION"
                  fi
                fi
              fi
            else
              echo "Detected Expo SDK version from app.json: $SDK_VERSION"
            fi
            
            # Determine if we need compatibility mode for older SDKs
            if [ ! -z "$SDK_VERSION" ] && [ "$SDK_VERSION" != "null" ]; then
              SDK_MAJOR=$(echo $SDK_VERSION | cut -d. -f1)
              if [ "$SDK_MAJOR" -lt "47" ]; then
                echo "Old SDK detected (SDK $SDK_MAJOR), using compatibility mode..."
                COMPAT_MODE=true
              else
                echo "Recent SDK detected (SDK $SDK_MAJOR), standard dependencies should work"
                COMPAT_MODE=false
              fi
            else
              echo "Could not detect SDK version, defaulting to compatibility mode for safety"
              COMPAT_MODE=true
            fi
            
            # Install appropriate expo version based on SDK
            if [ "$COMPAT_MODE" = "true" ]; then
              echo "Installing expo package and gradle plugin for old SDK..."
              # Install the specific gradle plugin version needed for older SDKs
              npm install @react-native/gradle-plugin@0.0.71 --save-dev || npm install @react-native/gradle-plugin@latest --save-dev
              # Don't upgrade expo for old SDKs, use existing version
              npm install
            else
              echo "Installing/updating expo package (required for prebuild)..."
              npm install expo@latest
            fi
            
            # Also install expo-modules-autolinking explicitly if needed
            if ! npm list expo-modules-autolinking > /dev/null 2>&1; then
              echo "Installing expo-modules-autolinking..."
              npm install expo-modules-autolinking@latest
            fi
            
            # Use CI=1 instead of --non-interactive (as recommended by Expo CLI)
            echo "Running prebuild with CI=1..."
            CI=1 npx --yes @expo/cli@latest prebuild --platform ios --no-install
            
            # Verify prebuild worked
            if [ ! -d "ios" ]; then
              echo "Error: Prebuild failed to create ios directory"
              echo "Attempting with basic prebuild command..."
              CI=1 npx --yes @expo/cli@latest prebuild --no-install
            fi
            
            # Final verification
            if [ ! -d "ios" ]; then
              echo "Error: Prebuild failed to create ios directory after all attempts"
              exit 1
            fi
            echo "Prebuild completed successfully"
          else
            echo "iOS folder already exists, skipping prebuild"
          fi
        else
          echo "Regular React Native project, native code should already exist"
          if [ ! -d "ios" ]; then
            echo "Error: Neither Expo project nor React Native project with ios folder found"
            exit 1
          fi
        fi

    - name: Install iOS pods
      run: |
        cd ios
        pod install --repo-update

    - name: Build iOS App (unsigned)
      run: |
        cd ios
        xcodebuild -workspace *.xcworkspace \
          -scheme ${{ github.event.repository.name }} \
          -configuration Release \
          -destination generic/platform=iOS \
          -derivedDataPath ./build \
          CODE_SIGNING_ALLOWED=NO



    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: ios/build/Build/Products/Release-iphoneos/*.app
        retention-days: 30


    - name: Upload artifacts to S3
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-2
      run: |
        # Upload React Native builds and record usage
        if [ -d android/app/build/outputs/apk/release ]; then
          for apk in android/app/build/outputs/apk/release/*.apk; do
            if [ -f "$apk" ]; then
              FILE_SIZE=$(stat -c%s "$apk")
              FILENAME=$(basename "$apk")
              aws s3 cp "$apk" s3://mobile-latch/artifacts/${{ github.run_id }}/android/$FILENAME
              curl -X POST "${{ secrets.BACKEND_URL }}/api/storage-usage/record-from-workflow" \
                -H "Content-Type: application/json" \
                -H "x-github-run-id: ${{ github.run_id }}" \
                -H "x-github-repo: ${{ github.repository }}" \
                -d "{\"provider\": \"s3\", \"bucket\": \"mobile-latch\", \"path\": \"artifacts/${{ github.run_id }}/android/$FILENAME\", \"size\": $FILE_SIZE, \"artifactType\": \"apk\"}"
            fi
          done
        fi
        if [ -d ios/build ]; then
          tar -czf ios-build.tar.gz -C ios/build .
          FILE_SIZE=$(stat -c%s ios-build.tar.gz)
          aws s3 cp ios-build.tar.gz s3://mobile-latch/artifacts/${{ github.run_id }}/ios/ios-build.tar.gz
          curl -X POST "${{ secrets.BACKEND_URL }}/api/storage-usage/record-from-workflow" \
            -H "Content-Type: application/json" \
            -H "x-github-run-id: ${{ github.run_id }}" \
            -H "x-github-repo: ${{ github.repository }}" \
            -d "{\"provider\": \"s3\", \"bucket\": \"mobile-latch\", \"path\": \"artifacts/${{ github.run_id }}/ios/ios-build.tar.gz\", \"size\": $FILE_SIZE, \"artifactType\": \"ipa\"}"
        fi
        echo "Artifacts uploaded to s3://mobile-latch/artifacts/${{ github.run_id }}/"
