name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'

    - name: Install dependencies
      run: npm ci

    - name: Setup Expo CLI (if needed)
      run: |
        if [ -f "app.json" ] || [ -f "app.config.js" ]; then
          echo "Expo project detected, installing Expo CLI"
          npm install -g @expo/cli
          # Ensure the global bin directory is in PATH
          echo "$(npm config get prefix)/bin" >> $GITHUB_PATH
        fi

    - name: Generate native code (Expo prebuild)
      run: |
        if [ -f "app.json" ] || [ -f "app.config.js" ]; then
          echo "Running Expo prebuild to generate native iOS code"
          if [ ! -d "ios" ]; then
            echo "iOS directory not found, running prebuild..."
            
            # Detect Expo SDK version from app.json
            if [ -f "app.json" ]; then
              SDK_VERSION=$(cat app.json | jq -r '.expo.sdkVersion // empty')
              echo "Detected Expo SDK version: ${SDK_VERSION:-'not specified'}"
            fi
            
            # Determine if we need compatibility mode for older SDKs
            if [ -n "$SDK_VERSION" ]; then
              SDK_MAJOR=$(echo $SDK_VERSION | cut -d. -f1)
              if [ "$SDK_MAJOR" -lt "47" ]; then
                echo "Old SDK detected ($SDK_VERSION), using compatibility mode..."
                COMPAT_MODE=true
              else
                echo "Recent SDK detected ($SDK_VERSION)"
                COMPAT_MODE=false
              fi
            else
              echo "No SDK version found, assuming recent version"
              COMPAT_MODE=false
            fi
            
            # Install appropriate expo version based on SDK
            if [ "$COMPAT_MODE" = "true" ]; then
              echo "Installing expo package compatible with SDK $SDK_VERSION..."
              # For old SDKs, let prebuild handle the expo version
              npm install expo
            else
              echo "Installing/updating expo package (required for prebuild)..."
              npm install expo@latest
            fi
            
            # Also install expo-modules-autolinking explicitly if needed
            if ! npm list expo-modules-autolinking > /dev/null 2>&1; then
              echo "Installing expo-modules-autolinking..."
              npm install expo-modules-autolinking@latest
            fi
            
            # Use CI=1 instead of --non-interactive (as recommended by Expo CLI)
            echo "Running prebuild with CI=1..."
            CI=1 npx --yes @expo/cli@latest prebuild --platform ios --no-install
            
            # Verify prebuild worked
            if [ ! -d "ios" ]; then
              echo "Error: Prebuild failed to create ios directory"
              echo "Attempting with basic prebuild command..."
              CI=1 npx --yes @expo/cli@latest prebuild --no-install
            fi
            
            # Final verification
            if [ ! -d "ios" ]; then
              echo "Error: Prebuild failed to create ios directory after all attempts"
              exit 1
            fi
            echo "Prebuild completed successfully"
          else
            echo "iOS folder already exists, skipping prebuild"
          fi
        else
          echo "Regular React Native project, native code should already exist"
          if [ ! -d "ios" ]; then
            echo "Error: Neither Expo project nor React Native project with ios folder found"
            exit 1
          fi
        fi

    - name: Install iOS pods
      run: |
        cd ios
        pod install --repo-update

    - name: Build iOS App (unsigned)
      run: |
        cd ios
        xcodebuild -workspace *.xcworkspace \
          -scheme ${{ github.event.repository.name }} \
          -configuration Release \
          -destination generic/platform=iOS \
          -derivedDataPath ./build \
          CODE_SIGNING_ALLOWED=NO



    - name: Upload iOS build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: ios/build/Build/Products/Release-iphoneos/*.app
        retention-days: 30


    - name: Upload artifacts to S3
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-2
      run: |
        # Upload React Native builds and record usage
        if [ -d android/app/build/outputs/apk/release ]; then
          for apk in android/app/build/outputs/apk/release/*.apk; do
            if [ -f "$apk" ]; then
              FILE_SIZE=$(stat -c%s "$apk")
              FILENAME=$(basename "$apk")
              aws s3 cp "$apk" s3://mobile-latch/artifacts/${{ github.run_id }}/android/$FILENAME
              curl -X POST "${{ secrets.BACKEND_URL }}/api/storage-usage/record-from-workflow" \
                -H "Content-Type: application/json" \
                -H "x-github-run-id: ${{ github.run_id }}" \
                -H "x-github-repo: ${{ github.repository }}" \
                -d "{\"provider\": \"s3\", \"bucket\": \"mobile-latch\", \"path\": \"artifacts/${{ github.run_id }}/android/$FILENAME\", \"size\": $FILE_SIZE, \"artifactType\": \"apk\"}"
            fi
          done
        fi
        if [ -d ios/build ]; then
          tar -czf ios-build.tar.gz -C ios/build .
          FILE_SIZE=$(stat -c%s ios-build.tar.gz)
          aws s3 cp ios-build.tar.gz s3://mobile-latch/artifacts/${{ github.run_id }}/ios/ios-build.tar.gz
          curl -X POST "${{ secrets.BACKEND_URL }}/api/storage-usage/record-from-workflow" \
            -H "Content-Type: application/json" \
            -H "x-github-run-id: ${{ github.run_id }}" \
            -H "x-github-repo: ${{ github.repository }}" \
            -d "{\"provider\": \"s3\", \"bucket\": \"mobile-latch\", \"path\": \"artifacts/${{ github.run_id }}/ios/ios-build.tar.gz\", \"size\": $FILE_SIZE, \"artifactType\": \"ipa\"}"
        fi
        echo "Artifacts uploaded to s3://mobile-latch/artifacts/${{ github.run_id }}/"
